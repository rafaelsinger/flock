generator client {
  provider = "prisma-client-js"
  seed     = "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Industry {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @unique
  users User[]

  @@map("industries")
}

model Location {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  country         String
  state           String
  city            String
  latitude        Float   @map("lat")
  longitude       Float   @map("lon")
  users           User[]
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("locations")
}

model User {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  email             String       @unique @map("bc_email")
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  postGradType      PostGradType @default(work) @map("postgrad_type")
  company           String?
  title             String?      @map("title")
  school            String?
  program           String?
  discipline        String?
  classYear         Int          @map("class_year") @default(2025)
  lookingForRoommate Boolean?     @default(false) @map("looking_for_roommate")
  industryId        String?      @map("industry_id") @db.Uuid
  locationId        String?      @map("location_id") @db.Uuid
  visibilityOptions Json?        @default("{}") @map("visibility_options")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @default(now()) @updatedAt @map("updated_at")
  isOnboarded       Boolean      @default(false) @map("is_onboarded")
  industry          Industry?    @relation(fields: [industryId], references: [id])
  location          Location?    @relation(fields: [locationId], references: [id])
  sentMessages      Message[]    @relation("SentMessages")
  receivedMessages  Message[]    @relation("ReceivedMessages")
  conversationsAsSender    Conversation[] @relation("ConversationSender")
  conversationsAsReceiver  Conversation[] @relation("ConversationReceiver")

  @@map("users")
}

model Account {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Conversation {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId          String        @map("sender_id") @db.Uuid
  receiverId        String        @map("receiver_id") @db.Uuid
  sender            User          @relation("ConversationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver          User          @relation("ConversationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages           Message[]
  createdAt          DateTime      @default(now()) @map("created_at")
  lastMessageAt      DateTime      @default(now()) @map("last_message_at")
  lastMessagePreview String?       @map("last_message_preview") @db.Text
  senderUnreadCount Int           @default(0) @map("sender_unread_count")
  receiverUnreadCount Int           @default(0) @map("receiver_unread_count")

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  senderId       String       @map("sender_id") @db.Uuid
  receiverId     String       @map("receiver_id") @db.Uuid
  content        String       @db.Text
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now()) @map("created_at")

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@map("messages")
}

enum PostGradType {
  work
  school
  seeking
  internship
}

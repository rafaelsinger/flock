// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostGradType {
  work
  school
}

model Industry {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @unique
  users User[]

  @@map("industries")
}

model User {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  email            String      @map("bc_email") @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  city             String?
  state            String?
  country          String?
  company          String?
  school           String?
  postGradType     PostGradType @map("postgrad_type") @default(work)
  visibilityOptions Json?   @default("{}") @map("visibility_options")
  title            String?  @map("title")
  program          String?
  boroughDistrict  String?  @map("borough_district")
  industry         Industry?  @relation(fields: [industryId], references: [id])
  industryId       String?  @map("industry_id") @db.Uuid
  isOnboarded      Boolean  @default(false) @map("is_onboarded")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("users")
} 

model Account {
  userId            String @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
  @@map("verification_tokens")
}